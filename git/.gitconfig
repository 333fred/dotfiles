# Note: my aliases assume all commits will be signed with a gpg key. To not sign with a gpg key, remove the -S from the commit aliases
# If signing with a gpg key, make sure to set the gpg with git config --global user.signingkey KEY_ID_HERE
[user]
	name = Fredric Silberberg
[core]
  fscache = true
  preloadindex = true
  editor = vim
  pager=delta
[color]
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red
  new = green
[alias]
  # add
  a = add                           # add
  au = add -u                       # add tracked
  aa = add .                        # add current directory
  ap = add -p                       # stage commits chunk by chunk

  # branch
  b = branch -v                     # branch (verbose)
  bd = branch -d                    # branch (delete)
  bD = branch -D                    # branch (force delete)
  bf = branch -f

  # commit
  c = commit                     # commit
  cm = commit -m                 # commit with message
  ca = commit -a                 # commit all
  cam = commit -am               # commit all
  caa = commit -a --amend        # add all tracked and amend your last commit
  amend = commit --amend

  # checkout
  co = checkout                     # checkout
  nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

  # clone
  cl = clone
  clr = clone --recursive

  # cherry-pick
  cp = cherry-pick -x               # grab a change from a branch

  # diff
  d = diff                          # diff unstaged changes
  dc = diff --cached                # diff staged changes
  last = diff HEAD^                 # diff last committed change
  dl = "!git ll -1"
  filelog = log -u
  fl = log -u
  dlc = diff --cached HEAD^

  # fetch
  f = fetch
  fd = fetch dotnet
  fpa = fetch --prune --all

  # log
  l = log --graph --date=short
  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn,\\ %cr]" --decorate
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn,\\ %cr]" --decorate --numstat

  # merge
  m = merge
  mm = merge master
  mmf = merge master --ff-only
  mf = merge --ff-only
  md = merge dotnet/master
  mdf = merge --ff-only dotnet/master

  # pull
  pl = pull                         # pull

  # push
  ps = push                         # push
  psf = push --force-with-lease     # push force with lease
  psu = push --set-upstream         # push with setting upstream
  psuo = push --set-upstream origin # push with setting upstream to be a branch in the origin remote

  # rebase
  rb = rebase                       # rebase
  rbi = rebase -i                   # interactive rebase
  rbc = rebase --continue            # continue rebase
  rbs = rebase --skip                # skip rebase
  rbb = "!git rebase -i `git merge-base master HEAD`" # rebase the current branch

  # remote
  r = remote -v                     # show remotes (verbose)
  ra = remote add
  rsu = remote set-url

  # reset
  unstage = reset HEAD              # remove files from index (tracking)
  uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
  filelog = log -u                  # show changes to a file
  mt = mergetool                    # fire up the merge tool
  nuke = reset --hard HEAD          # nuke from orbit
  scorch = !git nuke && git clean -Xfd
  annihilate = !git nuke && git clean -xfd

  # stash
  ss = stash -u                     # stash changes (with untracked)
  sp = stash pop                    # pop the stash
  sl = stash list                   # list stashes
  sa = stash apply                  # apply stash (restore changes)
  sd = stash drop                   # drop stashes (destory changes)

  # status
  s = status                        # status
  st = status                       # status
  stat = status                     # status

  # tag
  t = tag                           # show tags

  # index
  chmod = update-index --chmod                   # Update the perms of a file
  cx = chmod +x                                  # Set a file to executable
  assume = update-index --assume-unchanged       # Always assume file is unchanged
  unassume = update-index --no-assume-unchanged  # Undo above command

  # worktree
  wa = worktree add                 # add a new worktree
  wrm = worktree remove             # remove a worktree
  wl = worktree list                # list worktrees
[format]
  pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset
[merge]
  summary = true
  verbosity = 1
  conflictstyle = zdiff3
[apply]
  whitespace = nowarn
[branch]
  autosetupmerge = true
[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
  default = upstream
[advice]
  statusHints = false
[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
  mnemonicprefix = true
  algorithm = histogram
[rerere]
  # Remember my merges
  # http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
  enabled = true
[include]
  path = .gitconfig.local
[commit]
  gpgsign = true
[pager]
  branch = false
[pull]
  ff = only
[interactive]
  diffFilter = delta --color-only --features=interactive
[delta "interactive"]
  keep-plus-minus-markers = false
[delta "decorations"]
  commit-decoration-style = blue ol
  commit-style = raw
  file-style = omit
  hunk-header-decoration-style = blue box
  hunk-header-file-style = red
  hunk-header-line-number-style = "#067a00"
    hunk-header-style = file line-number syntax
[help]
  autocorrect = prompt
[init]
	defaultBranch = main
